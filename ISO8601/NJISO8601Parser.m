/* Generated by re2c 0.13.5 on Mon May 19 14:12:10 2014 */
#line 1 "./ISO8601/NJISO8601Parser.re"
/*
 *  NJISO8601Parser.re
 *  NJFoundation
 *
 *  Created by han9kin on 2012-03-21.
 *  Copyright (c) 2012 NHN. All rights reserved.
 *
 */

#import "NJISO8601Parser.h"


id NJISO8601ParseString(NSString *aString, NSString **aError);


static int NJIntFromString(const unsigned char *aString, int aDigits)
{
    int sValue = 0;

    for (int i = 0; i < aDigits; i++)
    {
        sValue  *= 10;
        sValue  += (*aString - '0');
        aString += 1;
    }

    return sValue;
}


static double NJFractionFromString(const unsigned char *aString, int aDigits)
{
    double sValue = 0.0;
    double sBase  = 1.0;

    for (int i = 0; i < aDigits; i++)
    {
        sBase   *= 10;
        sValue  += (*aString - '0') / sBase;
        aString += 1;
    }

    return sValue;
}


static BOOL NJIsLeapYear(int aYear)
{
    if ((((aYear % 4) == 0) && ((aYear % 100) != 0)) || ((aYear % 400) == 0))
    {
        return YES;
    }
    else
    {
        return NO;
    }
}


static BOOL NJGetGregorianDateFromOrdinalDate(CFGregorianDate *aGregorianDate, int aYear, int aDayOfYear)
{
    static int  sDays365[] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
    static int  sDays366[] = { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335 };
    int        *sDays;

    if (NJIsLeapYear(aYear))
    {
        sDays = sDays366;
    }
    else
    {
        sDays = sDays365;
    }

    for (int i = 11; i >= 0; i--)
    {
        if (aDayOfYear > sDays[i])
        {
            aGregorianDate->year  = aYear;
            aGregorianDate->month = i + 1;
            aGregorianDate->day   = aDayOfYear - sDays[i];

            return YES;
        }
    }

    return NO;
}


static int NJDayOfYearFromWeekDate(int *aYear, int aWeek, int aDayOfWeek)
{
    /*
     * Algorithm from http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
     */

    CFGregorianDate sDateOfJan4;
    int             sWeekdayOfJan4;
    int             sDayOfYear;

    sDateOfJan4.year   = *aYear;
    sDateOfJan4.month  = 1;
    sDateOfJan4.day    = 4;
    sDateOfJan4.hour   = 0;
    sDateOfJan4.minute = 0;
    sDateOfJan4.second = 0.0;

    sWeekdayOfJan4 = CFAbsoluteTimeGetDayOfWeek(CFGregorianDateGetAbsoluteTime(sDateOfJan4, NULL), NULL);
    sDayOfYear     = aWeek * 7 + aDayOfWeek - (sWeekdayOfJan4 + 3);

    if (sDayOfYear <= 0)
    {
        *aYear     = *aYear - 1;
        sDayOfYear = ((NJIsLeapYear(*aYear)) ? 366 : 365) - sDayOfYear;
    }
    else
    {
        int sDaysOfYear = NJIsLeapYear(*aYear) ? 366 : 365;

        if (sDayOfYear > sDaysOfYear)
        {
            *aYear     = *aYear + 1;
            sDayOfYear = sDayOfYear - sDaysOfYear;
        }
    }

    return sDayOfYear;
}


static CFTimeInterval NJMidnightCorrectionWithGregorianDate(CFGregorianDate *aGregorianDate)
{
    if ((aGregorianDate->hour == 24) && (aGregorianDate->minute == 0) && (aGregorianDate->second == 0.0))
    {
        aGregorianDate->hour = 0;

        return (CFTimeInterval)24 * 60 * 60;
    }
    else
    {
        return (CFTimeInterval)0;
    }
}


static NSDate *NJDateFromGregorianDateWithLocalTimeZone(CFGregorianDate aGregorianDate, NSString **aError)
{
    CFTimeInterval sMidnightCorrection = NJMidnightCorrectionWithGregorianDate(&aGregorianDate);

    if (CFGregorianDateIsValid(aGregorianDate, kCFGregorianAllUnits))
    {
        CFAbsoluteTime sAbsoluteTime = CFGregorianDateGetAbsoluteTime(aGregorianDate, (CFTimeZoneRef)[NSTimeZone localTimeZone]);

        return [NSDate dateWithTimeIntervalSinceReferenceDate:(sAbsoluteTime + sMidnightCorrection)];
    }
    else
    {
        *aError = @"Invalid gregorian calendar unit.";

        return nil;
    }
}


static NSDate *NJDateFromGregorianDateWithTimeZoneOffset(CFGregorianDate aGregorianDate, double aTimeZoneOffset, NSString **aError)
{
    CFTimeInterval sMidnightCorrection = NJMidnightCorrectionWithGregorianDate(&aGregorianDate);

    if (CFGregorianDateIsValid(aGregorianDate, kCFGregorianAllUnits))
    {
        CFAbsoluteTime sAbsoluteTime = CFGregorianDateGetAbsoluteTime(aGregorianDate, NULL);

        return [NSDate dateWithTimeIntervalSinceReferenceDate:(sAbsoluteTime + sMidnightCorrection - aTimeZoneOffset)];
    }
    else
    {
        *aError = @"Invalid gregorian calendar unit.";

        return nil;
    }
}


#define NJISO8601ParseGetCondition()           sCondition
#define NJISO8601ParseSetCondition(aCondition) sCondition = aCondition


id NJISO8601ParseString(NSString *aString, NSString **aError)
{
    NSString            *sError = nil;
    CFGregorianDate      sGregorianDate;
    CFTimeInterval       sTimeZoneOffset;
    const unsigned char *sMatch;
    const unsigned char *sCursor;
    const unsigned char *sMarker;
    int                  sCondition;

    sCursor    = (const unsigned char *)[aString UTF8String];
    sCondition = kNJISO8601ConditionStart;

    while (1)
    {
        sMatch = sCursor;

        
#line 209 "./ISO8601/NJISO8601Parser.m"
        {
            unsigned char yych;
            unsigned int yyaccept = 0;
            if (NJISO8601ParseGetCondition() < 4) {
                if (NJISO8601ParseGetCondition() < 2) {
                    if (NJISO8601ParseGetCondition() < 1) {
                        goto NJISO8601ConditionStart;
                    } else {
                        goto NJISO8601ConditionDateBegin;
                    }
                } else {
                    if (NJISO8601ParseGetCondition() < 3) {
                        goto NJISO8601ConditionDateEnd;
                    } else {
                        goto NJISO8601ConditionTimeBegin;
                    }
                }
            } else {
                if (NJISO8601ParseGetCondition() < 6) {
                    if (NJISO8601ParseGetCondition() < 5) {
                        goto NJISO8601ConditionTimeEnd;
                    } else {
                        goto NJISO8601ConditionTimeZoneBegin;
                    }
                } else {
                    if (NJISO8601ParseGetCondition() < 7) {
                        goto NJISO8601ConditionTimeZoneEnd;
                    } else {
                        if (NJISO8601ParseGetCondition() < 8) {
                            goto NJISO8601ConditionDurationBegin;
                        } else {
                            goto NJISO8601ConditionRecurringIntervalBegin;
                        }
                    }
                }
            }
/* *********************************** */
NJISO8601ConditionDateBegin:

            yych = *sCursor;
            if (yych <= ',') {
                if (yych <= 0x00) goto yy2;
                if (yych == '+') goto yy6;
                goto yy4;
            } else {
                if (yych <= '-') goto yy6;
                if (yych <= '/') goto yy4;
                if (yych <= '9') goto yy7;
                goto yy4;
            }
yy2:
            ++sCursor;
#line 645 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected end of string.";
                break;
            }
#line 267 "./ISO8601/NJISO8601Parser.m"
yy4:
            ++sCursor;
yy5:
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 276 "./ISO8601/NJISO8601Parser.m"
yy6:
            yyaccept = 0;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') goto yy5;
            if (yych <= '9') goto yy42;
            goto yy5;
yy7:
            yyaccept = 0;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') goto yy5;
            if (yych >= ':') goto yy5;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy10;
yy9:
            sCursor = sMarker;
            if (yyaccept <= 3) {
                if (yyaccept <= 1) {
                    if (yyaccept <= 0) {
                        goto yy5;
                    } else {
                        goto yy12;
                    }
                } else {
                    if (yyaccept <= 2) {
                        goto yy29;
                    } else {
                        goto yy38;
                    }
                }
            } else {
                if (yyaccept <= 5) {
                    if (yyaccept <= 4) {
                        goto yy46;
                    } else {
                        goto yy54;
                    }
                } else {
                    if (yyaccept <= 6) {
                        goto yy59;
                    } else {
                        goto yy75;
                    }
                }
            }
yy10:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yyaccept = 1;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') {
                if (yych == '-') goto yy13;
            } else {
                if (yych <= '9') goto yy14;
                if (yych == 'W') goto yy15;
            }
yy12:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 286 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.year  = NJIntFromString(sMatch, 4);
                sGregorianDate.month = 1;
                sGregorianDate.day   = 1;
                continue;
            }
#line 343 "./ISO8601/NJISO8601Parser.m"
yy13:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy27;
            if (yych == 'W') goto yy26;
            goto yy9;
yy14:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy21;
            goto yy9;
yy15:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            if ((yych = *sCursor) <= '/') goto yy18;
            if (yych <= '9') goto yy19;
yy18:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 405 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sWeek      = NJIntFromString(sMatch + 5, 2);
                int sDayOfYear = NJDayOfYearFromWeekDate(&sYear, sWeek, 1);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 375 "./ISO8601/NJISO8601Parser.m"
yy19:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 395 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sWeek      = NJIntFromString(sMatch + 5, 2);
                int sDayOfWeek = NJIntFromString(sMatch + 7, 1);
                int sDayOfYear = NJDayOfYearFromWeekDate(&sYear, sWeek, sDayOfWeek);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 388 "./ISO8601/NJISO8601Parser.m"
yy21:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            if ((yych = *sCursor) <= '/') goto yy23;
            if (yych <= '9') goto yy24;
yy23:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 345 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sDayOfYear = NJIntFromString(sMatch + 4, 3);
                if (NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear))
                {
                    continue;
                }
                else
                {
                    sError = @"Invalid ordinal date.";
                    break;
                }
            }
#line 412 "./ISO8601/NJISO8601Parser.m"
yy24:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 278 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.year  = NJIntFromString(sMatch, 4);
                sGregorianDate.month = NJIntFromString(sMatch + 4, 2);
                sGregorianDate.day   = NJIntFromString(sMatch + 6, 2);
                continue;
            }
#line 423 "./ISO8601/NJISO8601Parser.m"
yy26:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy36;
            goto yy9;
yy27:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yyaccept = 2;
            yych = *(sMarker = ++sCursor);
            if (yych == '-') goto yy32;
            if (yych <= '/') goto yy29;
            if (yych <= '9') goto yy30;
yy29:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 270 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.year  = NJIntFromString(sMatch, 4);
                sGregorianDate.month = NJIntFromString(sMatch + 5, 2);
                sGregorianDate.day   = 1;
                continue;
            }
#line 447 "./ISO8601/NJISO8601Parser.m"
yy30:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 330 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sDayOfYear = NJIntFromString(sMatch + 5, 3);
                if (NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear))
                {
                    continue;
                }
                else
                {
                    sError = @"Invalid ordinal date.";
                    break;
                }
            }
#line 465 "./ISO8601/NJISO8601Parser.m"
yy32:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 262 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.year  = NJIntFromString(sMatch, 4);
                sGregorianDate.month = NJIntFromString(sMatch + 5, 2);
                sGregorianDate.day   = NJIntFromString(sMatch + 8, 2);
                continue;
            }
#line 482 "./ISO8601/NJISO8601Parser.m"
yy36:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yyaccept = 3;
            yych = *(sMarker = ++sCursor);
            if (yych == '-') goto yy39;
yy38:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 386 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sWeek      = NJIntFromString(sMatch + 6, 2);
                int sDayOfYear = NJDayOfYearFromWeekDate(&sYear, sWeek, 1);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 500 "./ISO8601/NJISO8601Parser.m"
yy39:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 376 "./ISO8601/NJISO8601Parser.re"
            {
                int sYear      = NJIntFromString(sMatch, 4);
                int sWeek      = NJIntFromString(sMatch + 6, 2);
                int sDayOfWeek = NJIntFromString(sMatch + 9, 1);
                int sDayOfYear = NJDayOfYearFromWeekDate(&sYear, sWeek, sDayOfWeek);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 516 "./ISO8601/NJISO8601Parser.m"
yy42:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yyaccept = 4;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') {
                if (yych == '-') goto yy49;
            } else {
                if (yych <= '9') goto yy47;
                if (yych == 'W') goto yy48;
            }
yy46:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 321 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits      = sCursor - sMatch - 1;
                sGregorianDate.year  = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                sGregorianDate.month = 1;
                sGregorianDate.day   = 1;
                continue;
            }
#line 545 "./ISO8601/NJISO8601Parser.m"
yy47:
            yyaccept = 4;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') {
                if (yych == '-') goto yy49;
                goto yy46;
            } else {
                if (yych <= '9') goto yy71;
                if (yych != 'W') goto yy46;
            }
yy48:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy66;
            goto yy9;
yy49:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy50;
            if (yych == 'W') goto yy51;
            goto yy9;
yy50:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy58;
            goto yy9;
yy51:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            yyaccept = 5;
            yych = *(sMarker = ++sCursor);
            if (yych == '-') goto yy55;
yy54:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 425 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits = sCursor - sMatch - 5;
                int sYear       = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                int sWeek       = NJIntFromString(sMatch + sYearDigits + 3, 2);
                int sDayOfYear  = NJDayOfYearFromWeekDate(&sYear, sWeek, 1);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 593 "./ISO8601/NJISO8601Parser.m"
yy55:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 414 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits = sCursor - sMatch - 7;
                int sYear       = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                int sWeek       = NJIntFromString(sMatch + sYearDigits + 3, 2);
                int sDayOfWeek  = NJIntFromString(sMatch + sYearDigits + 6, 1);
                int sDayOfYear  = NJDayOfYearFromWeekDate(&sYear, sWeek, sDayOfWeek);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 610 "./ISO8601/NJISO8601Parser.m"
yy58:
            yyaccept = 6;
            yych = *(sMarker = ++sCursor);
            if (yych == '-') goto yy60;
            if (yych <= '/') goto yy59;
            if (yych <= '9') goto yy61;
yy59:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 303 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits      = sCursor - sMatch - 4;
                sGregorianDate.year  = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                sGregorianDate.month = NJIntFromString(sMatch + sYearDigits + 2, 2);
                sGregorianDate.day   = 1;
                continue;
            }
#line 627 "./ISO8601/NJISO8601Parser.m"
yy60:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych <= '9') goto yy63;
            goto yy9;
yy61:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 360 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits = sCursor - sMatch - 5;
                int sYear       = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                int sDayOfYear  = NJIntFromString(sMatch + sYearDigits + 2, 3);
                if (NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear))
                {
                    continue;
                }
                else
                {
                    sError = @"Invalid ordinal date.";
                    break;
                }
            }
#line 651 "./ISO8601/NJISO8601Parser.m"
yy63:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 294 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits      = sCursor - sMatch - 7;
                sGregorianDate.year  = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                sGregorianDate.month = NJIntFromString(sMatch + sYearDigits + 2, 2);
                sGregorianDate.day   = NJIntFromString(sMatch + sYearDigits + 5, 2);
                continue;
            }
#line 666 "./ISO8601/NJISO8601Parser.m"
yy66:
            yych = *++sCursor;
            if (yych <= '/') goto yy9;
            if (yych >= ':') goto yy9;
            ++sCursor;
            if ((yych = *sCursor) <= '/') goto yy68;
            if (yych <= '9') goto yy69;
yy68:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 446 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits = sCursor - sMatch - 4;
                int sYear       = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                int sWeek       = NJIntFromString(sMatch + sYearDigits + 2, 2);
                int sDayOfYear  = NJDayOfYearFromWeekDate(&sYear, sWeek, 1);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 685 "./ISO8601/NJISO8601Parser.m"
yy69:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 435 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits = sCursor - sMatch - 5;
                int sYear       = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                int sWeek       = NJIntFromString(sMatch + sYearDigits + 2, 2);
                int sDayOfWeek  = NJIntFromString(sMatch + sYearDigits + 4, 1);
                int sDayOfYear  = NJDayOfYearFromWeekDate(&sYear, sWeek, sDayOfWeek);
                NJGetGregorianDateFromOrdinalDate(&sGregorianDate, sYear, sDayOfYear);
                continue;
            }
#line 699 "./ISO8601/NJISO8601Parser.m"
yy71:
            yyaccept = 4;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') {
                if (yych == '-') goto yy49;
                goto yy46;
            } else {
                if (yych <= '9') goto yy72;
                if (yych == 'W') goto yy48;
                goto yy46;
            }
yy72:
            yyaccept = 4;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') {
                if (yych == '-') goto yy49;
                goto yy46;
            } else {
                if (yych <= '9') goto yy73;
                if (yych == 'W') goto yy48;
                goto yy46;
            }
yy73:
            yyaccept = 7;
            sMarker = ++sCursor;
            yych = *sCursor;
            if (yych <= '/') {
                if (yych == '-') goto yy49;
            } else {
                if (yych <= '9') goto yy73;
                if (yych == 'W') goto yy48;
            }
yy75:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateEnd);
#line 312 "./ISO8601/NJISO8601Parser.re"
            {
                int sYearDigits      = sCursor - sMatch - 5;
                sGregorianDate.year  = NJIntFromString(sMatch + 1, sYearDigits) * ((*sMatch == '+') ? 1 : -1);
                sGregorianDate.month = NJIntFromString(sMatch + sYearDigits + 1, 2);
                sGregorianDate.day   = NJIntFromString(sMatch + sYearDigits + 3, 2);
                continue;
            }
#line 742 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionDateEnd:
            yych = *sCursor;
            if (yych <= '/') {
                if (yych <= 0x00) goto yy78;
                if (yych <= '.') goto yy80;
                goto yy82;
            } else {
                if (yych == 'T') goto yy84;
                goto yy80;
            }
yy78:
            ++sCursor;
#line 468 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour   = 0;
                sGregorianDate.minute = 0;
                sGregorianDate.second = 0;

                return NJDateFromGregorianDateWithLocalTimeZone(sGregorianDate, aError);
            }
#line 764 "./ISO8601/NJISO8601Parser.m"
yy80:
            ++sCursor;
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 772 "./ISO8601/NJISO8601Parser.m"
yy82:
            ++sCursor;
#line 462 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"ISO8601 Time Interval not supported yet.";
                break;
            }
#line 780 "./ISO8601/NJISO8601Parser.m"
yy84:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeBegin);
#line 457 "./ISO8601/NJISO8601Parser.re"
            {
                continue;
            }
#line 788 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionDurationBegin:
            yych = *sCursor;
            if (yych >= 0x01) goto yy90;
            ++sCursor;
yy89:
#line 631 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"ISO8601 Duration not supported yet.";
                break;
            }
#line 800 "./ISO8601/NJISO8601Parser.m"
yy90:
            ++sCursor;
            yych = *sCursor;
            goto yy89;
/* *********************************** */
NJISO8601ConditionRecurringIntervalBegin:
            yych = *sCursor;
            if (yych >= 0x01) goto yy95;
            ++sCursor;
yy94:
#line 638 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"ISO8601 Recurring Time Interval not supported yet.";
                break;
            }
#line 816 "./ISO8601/NJISO8601Parser.m"
yy95:
            ++sCursor;
            yych = *sCursor;
            goto yy94;
/* *********************************** */
NJISO8601ConditionStart:
            yych = *sCursor;
            if (yych <= 'P') {
                if (yych <= 0x00) goto yy98;
                if (yych <= 'O') goto yy100;
                goto yy101;
            } else {
                if (yych == 'R') goto yy103;
                goto yy100;
            }
yy98:
            ++sCursor;
yy99:
            NJISO8601ParseSetCondition(kNJISO8601ConditionDateBegin);
#line 255 "./ISO8601/NJISO8601Parser.re"
            {
                sCursor--;
                continue;
            }
#line 841 "./ISO8601/NJISO8601Parser.m"
yy100:
            yych = *++sCursor;
            goto yy99;
yy101:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionDurationBegin);
#line 245 "./ISO8601/NJISO8601Parser.re"
            {
                continue;
            }
#line 852 "./ISO8601/NJISO8601Parser.m"
yy103:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionRecurringIntervalBegin);
#line 250 "./ISO8601/NJISO8601Parser.re"
            {
                continue;
            }
#line 860 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionTimeBegin:
            yych = *sCursor;
            if (yych <= 0x00) goto yy107;
            if (yych <= '/') goto yy109;
            if (yych <= '9') goto yy111;
            goto yy109;
yy107:
            ++sCursor;
#line 645 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected end of string.";
                break;
            }
#line 875 "./ISO8601/NJISO8601Parser.m"
yy109:
            ++sCursor;
yy110:
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 884 "./ISO8601/NJISO8601Parser.m"
yy111:
            yych = *++sCursor;
            if (yych <= '/') goto yy110;
            if (yych >= ':') goto yy110;
            yyaccept = 0;
            yych = *(sMarker = ++sCursor);
            if (yych <= '.') {
                if (yych == ',') goto yy117;
                if (yych >= '.') goto yy117;
            } else {
                if (yych <= '/') goto yy113;
                if (yych <= '9') goto yy116;
                if (yych <= ':') goto yy114;
            }
yy113:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 558 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = 0;
                sGregorianDate.second  = 0;
                continue;
            }
#line 908 "./ISO8601/NJISO8601Parser.m"
yy114:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych <= '9') goto yy134;
yy115:
            sCursor = sMarker;
            if (yyaccept <= 2) {
                if (yyaccept <= 1) {
                    if (yyaccept <= 0) {
                        goto yy113;
                    } else {
                        goto yy122;
                    }
                } else {
                    goto yy129;
                }
            } else {
                if (yyaccept <= 3) {
                    goto yy136;
                } else {
                    goto yy141;
                }
            }
yy116:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych <= '9') goto yy121;
            goto yy115;
yy117:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
yy118:
            ++sCursor;
            yych = *sCursor;
            if (yych <= '/') goto yy120;
            if (yych <= '9') goto yy118;
yy120:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 548 "./ISO8601/NJISO8601Parser.re"
            {
                int    sFractionDigits = sCursor - sMatch - 3;
                double sFraction       = NJFractionFromString(sMatch + 3, sFractionDigits);
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = floor(sFraction * 60.0);
                sGregorianDate.second  = (sFraction * 60.0 - sGregorianDate.minute) * 60.0;
                continue;
            }
#line 957 "./ISO8601/NJISO8601Parser.m"
yy121:
            yyaccept = 1;
            yych = *(sMarker = ++sCursor);
            if (yych <= '-') {
                if (yych == ',') goto yy124;
            } else {
                if (yych <= '.') goto yy124;
                if (yych <= '/') goto yy122;
                if (yych <= '9') goto yy123;
            }
yy122:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 540 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 2, 2);
                sGregorianDate.second  = 0;
                continue;
            }
#line 977 "./ISO8601/NJISO8601Parser.m"
yy123:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych <= '9') goto yy128;
            goto yy115;
yy124:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
yy125:
            ++sCursor;
            yych = *sCursor;
            if (yych <= '/') goto yy127;
            if (yych <= '9') goto yy125;
yy127:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 531 "./ISO8601/NJISO8601Parser.re"
            {
                int sFractionDigits    = sCursor - sMatch - 5;
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 2, 2);
                sGregorianDate.second  = NJFractionFromString(sMatch + 5, sFractionDigits) * 60.0;
                continue;
            }
#line 1002 "./ISO8601/NJISO8601Parser.m"
yy128:
            yyaccept = 2;
            yych = *(sMarker = ++sCursor);
            if (yych == ',') goto yy130;
            if (yych == '.') goto yy130;
yy129:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 523 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 2, 2);
                sGregorianDate.second  = NJIntFromString(sMatch + 4, 2);
                continue;
            }
#line 1017 "./ISO8601/NJISO8601Parser.m"
yy130:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
yy131:
            ++sCursor;
            yych = *sCursor;
            if (yych <= '/') goto yy133;
            if (yych <= '9') goto yy131;
yy133:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 513 "./ISO8601/NJISO8601Parser.re"
            {
                int sFractionDigits    = sCursor - sMatch - 7;
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 2, 2);
                sGregorianDate.second  = NJIntFromString(sMatch + 4, 2);
                sGregorianDate.second += NJFractionFromString(sMatch + 7, sFractionDigits);
                continue;
            }
#line 1038 "./ISO8601/NJISO8601Parser.m"
yy134:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
            yyaccept = 3;
            yych = *(sMarker = ++sCursor);
            if (yych <= '-') {
                if (yych == ',') goto yy137;
            } else {
                if (yych <= '.') goto yy137;
                if (yych == ':') goto yy138;
            }
yy136:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 505 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 3, 2);
                sGregorianDate.second  = 0;
                continue;
            }
#line 1060 "./ISO8601/NJISO8601Parser.m"
yy137:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych <= '9') goto yy146;
            goto yy115;
yy138:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
            yyaccept = 4;
            yych = *(sMarker = ++sCursor);
            if (yych == ',') goto yy142;
            if (yych == '.') goto yy142;
yy141:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 488 "./ISO8601/NJISO8601Parser.re"
            {
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 3, 2);
                sGregorianDate.second  = NJIntFromString(sMatch + 6, 2);
                continue;
            }
#line 1086 "./ISO8601/NJISO8601Parser.m"
yy142:
            yych = *++sCursor;
            if (yych <= '/') goto yy115;
            if (yych >= ':') goto yy115;
yy143:
            ++sCursor;
            yych = *sCursor;
            if (yych <= '/') goto yy145;
            if (yych <= '9') goto yy143;
yy145:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 478 "./ISO8601/NJISO8601Parser.re"
            {
                int sFractionDigits    = sCursor - sMatch - 9;
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 3, 2);
                sGregorianDate.second  = NJIntFromString(sMatch + 6, 2);
                sGregorianDate.second += NJFractionFromString(sMatch + 9, sFractionDigits);
                continue;
            }
#line 1107 "./ISO8601/NJISO8601Parser.m"
yy146:
            ++sCursor;
            yych = *sCursor;
            if (yych <= '/') goto yy148;
            if (yych <= '9') goto yy146;
yy148:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeEnd);
#line 496 "./ISO8601/NJISO8601Parser.re"
            {
                int sFractionDigits    = sCursor - sMatch - 6;
                sGregorianDate.hour    = NJIntFromString(sMatch, 2);
                sGregorianDate.minute  = NJIntFromString(sMatch + 3, 2);
                sGregorianDate.second  = NJFractionFromString(sMatch + 6, sFractionDigits) * 60.0;
                continue;
            }
#line 1123 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionTimeEnd:
            yych = *sCursor;
            if (yych <= '-') {
                if (yych <= '*') {
                    if (yych >= 0x01) goto yy153;
                } else {
                    if (yych == ',') goto yy153;
                    goto yy155;
                }
            } else {
                if (yych <= '/') {
                    if (yych <= '.') goto yy153;
                    goto yy157;
                } else {
                    if (yych == 'Z') goto yy159;
                    goto yy153;
                }
            }
            ++sCursor;
#line 585 "./ISO8601/NJISO8601Parser.re"
            {
                return NJDateFromGregorianDateWithLocalTimeZone(sGregorianDate, aError);
            }
#line 1148 "./ISO8601/NJISO8601Parser.m"
yy153:
            ++sCursor;
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 1156 "./ISO8601/NJISO8601Parser.m"
yy155:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneBegin);
#line 573 "./ISO8601/NJISO8601Parser.re"
            {
                sCursor--;
                continue;
            }
#line 1165 "./ISO8601/NJISO8601Parser.m"
yy157:
            ++sCursor;
#line 579 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"ISO8601 Time Interval not supported yet.";
                break;
            }
#line 1173 "./ISO8601/NJISO8601Parser.m"
yy159:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneBegin);
#line 567 "./ISO8601/NJISO8601Parser.re"
            {
                sCursor--;
                continue;
            }
#line 1182 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionTimeZoneBegin:
            yych = *sCursor;
            if (yych <= ',') {
                if (yych <= 0x00) goto yy163;
                if (yych == '+') goto yy167;
                goto yy165;
            } else {
                if (yych <= '-') goto yy167;
                if (yych == 'Z') goto yy168;
                goto yy165;
            }
yy163:
            ++sCursor;
#line 645 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected end of string.";
                break;
            }
#line 1202 "./ISO8601/NJISO8601Parser.m"
yy165:
            ++sCursor;
yy166:
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 1211 "./ISO8601/NJISO8601Parser.m"
yy167:
            yyaccept = 0;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') goto yy166;
            if (yych <= '9') goto yy170;
            goto yy166;
yy168:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneEnd);
#line 591 "./ISO8601/NJISO8601Parser.re"
            {
                sTimeZoneOffset = 0;
                continue;
            }
#line 1226 "./ISO8601/NJISO8601Parser.m"
yy170:
            yych = *++sCursor;
            if (yych <= '/') goto yy171;
            if (yych <= '9') goto yy172;
yy171:
            sCursor = sMarker;
            if (yyaccept <= 0) {
                goto yy166;
            } else {
                goto yy173;
            }
yy172:
            yyaccept = 1;
            yych = *(sMarker = ++sCursor);
            if (yych <= '/') goto yy173;
            if (yych <= '9') goto yy174;
            if (yych <= ':') goto yy175;
yy173:
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneEnd);
#line 611 "./ISO8601/NJISO8601Parser.re"
            {
                sTimeZoneOffset  = NJIntFromString(sMatch + 1, 2) * 60 * 60;
                sTimeZoneOffset *= (*sMatch == '+') ? 1.0 : -1.0;
                continue;
            }
#line 1252 "./ISO8601/NJISO8601Parser.m"
yy174:
            yych = *++sCursor;
            if (yych <= '/') goto yy171;
            if (yych <= '9') goto yy179;
            goto yy171;
yy175:
            yych = *++sCursor;
            if (yych <= '/') goto yy171;
            if (yych >= ':') goto yy171;
            yych = *++sCursor;
            if (yych <= '/') goto yy171;
            if (yych >= ':') goto yy171;
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneEnd);
#line 597 "./ISO8601/NJISO8601Parser.re"
            {
                sTimeZoneOffset  = NJIntFromString(sMatch + 1, 2) * 60 * 60 + NJIntFromString(sMatch + 4, 2) * 60;
                sTimeZoneOffset *= (*sMatch == '+') ? 1.0 : -1.0;
                continue;
            }
#line 1273 "./ISO8601/NJISO8601Parser.m"
yy179:
            ++sCursor;
            NJISO8601ParseSetCondition(kNJISO8601ConditionTimeZoneEnd);
#line 604 "./ISO8601/NJISO8601Parser.re"
            {
                sTimeZoneOffset  = NJIntFromString(sMatch + 1, 2) * 60 * 60 + NJIntFromString(sMatch + 3, 2) * 60;
                sTimeZoneOffset *= (*sMatch == '+') ? 1.0 : -1.0;
                continue;
            }
#line 1283 "./ISO8601/NJISO8601Parser.m"
/* *********************************** */
NJISO8601ConditionTimeZoneEnd:
            yych = *sCursor;
            if (yych <= 0x00) goto yy183;
            if (yych == '/') goto yy187;
            goto yy185;
yy183:
            ++sCursor;
#line 625 "./ISO8601/NJISO8601Parser.re"
            {
                return NJDateFromGregorianDateWithTimeZoneOffset(sGregorianDate, sTimeZoneOffset, aError);
            }
#line 1296 "./ISO8601/NJISO8601Parser.m"
yy185:
            ++sCursor;
#line 651 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"Unexpected character.";
                break;
            }
#line 1304 "./ISO8601/NJISO8601Parser.m"
yy187:
            ++sCursor;
#line 619 "./ISO8601/NJISO8601Parser.re"
            {
                sError = @"ISO8601 Time Interval not supported yet.";
                break;
            }
#line 1312 "./ISO8601/NJISO8601Parser.m"
        }
#line 656 "./ISO8601/NJISO8601Parser.re"

    }

    if (aError)
    {
        *aError = sError;
    }

    return nil;
}
